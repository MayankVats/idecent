/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  DecentralizedIdentityManager,
  DecentralizedIdentityManagerInterface,
} from "../DecentralizedIdentityManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "userId",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "createdAt",
        type: "uint256",
      },
    ],
    name: "UserCreated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "userId",
        type: "address",
      },
    ],
    name: "UserUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "nickname",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "publicKey",
        type: "bytes32",
      },
    ],
    name: "createUser",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userId",
        type: "address",
      },
    ],
    name: "getUser",
    outputs: [
      {
        internalType: "bytes32",
        name: "nickname",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "publicKey",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "registrationTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastUpdateTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "nickname",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "publicKey",
        type: "bytes32",
      },
    ],
    name: "updateUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "users",
    outputs: [
      {
        internalType: "bytes32",
        name: "nickname",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "publicKey",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "registrationTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "lastUpdateTime",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "userId",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "verifyUserSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e18806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063082e81ca1461005c5780634bc003471461008c5780636f77926b146100a8578063a87430ba146100db578063a91202d31461010e575b600080fd5b610076600480360381019061007191906108e6565b61013e565b604051610083919061097c565b60405180910390f35b6100a660048036038101906100a19190610997565b61027d565b005b6100c260048036038101906100bd91906109ea565b610454565b6040516100d29493929190610a3f565b60405180910390f35b6100f560048036038101906100f091906109ea565b6105f5565b6040516101059493929190610a3f565b60405180910390f35b61012860048036038101906101239190610a84565b610625565b6040516101359190610ad3565b60405180910390f35b6000806000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154036101c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ba90610b4b565b60405180910390fd5b6000856040516020016101d69190610be3565b6040516020818303038152906040528051906020012090506000600182878787604051600081526020016040526040516102139493929190610c18565b6020604051602081039080840390855afa158015610235573d6000803e3d6000fd5b5050506020604051035190508773ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16149250505095945050505050565b60006102c96000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610807565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610339576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033090610ccf565b60405180910390fd5b826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550816000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181905550426000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055508373ffffffffffffffffffffffffffffffffffffffff167f0163b5f10e25c839f35e6f2b201b31e88e17f49e6956232de5d2e6bbae3b78b860405160405180910390a250505050565b60008060008060008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154036104de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d590610b4b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015493506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015492506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015491506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015490509193509193565b60006020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b60008061063183610807565b90503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146106a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069890610d3b565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015414610725576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071c90610da7565b60405180910390fd5b6040518060800160405280858152602001848152602001428152602001428152506000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301559050508073ffffffffffffffffffffffffffffffffffffffff167fa27642fccf9a9a0a8a8e31188dfec60a6565c30a20ef3ed1eb3a779a79a36b2e426040516107f59190610dc7565b60405180910390a28091505092915050565b60008160001c9050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061084482610819565b9050919050565b61085481610839565b811461085f57600080fd5b50565b6000813590506108718161084b565b92915050565b6000819050919050565b61088a81610877565b811461089557600080fd5b50565b6000813590506108a781610881565b92915050565b600060ff82169050919050565b6108c3816108ad565b81146108ce57600080fd5b50565b6000813590506108e0816108ba565b92915050565b600080600080600060a0868803121561090257610901610814565b5b600061091088828901610862565b955050602061092188828901610898565b9450506040610932888289016108d1565b935050606061094388828901610898565b925050608061095488828901610898565b9150509295509295909350565b60008115159050919050565b61097681610961565b82525050565b6000602082019050610991600083018461096d565b92915050565b6000806000606084860312156109b0576109af610814565b5b60006109be86828701610862565b93505060206109cf86828701610898565b92505060406109e086828701610898565b9150509250925092565b600060208284031215610a00576109ff610814565b5b6000610a0e84828501610862565b91505092915050565b610a2081610877565b82525050565b6000819050919050565b610a3981610a26565b82525050565b6000608082019050610a546000830187610a17565b610a616020830186610a17565b610a6e6040830185610a30565b610a7b6060830184610a30565b95945050505050565b60008060408385031215610a9b57610a9a610814565b5b6000610aa985828601610898565b9250506020610aba85828601610898565b9150509250929050565b610acd81610839565b82525050565b6000602082019050610ae86000830184610ac4565b92915050565b600082825260208201905092915050565b7f5573657220646f6573206e6f7420657869737400000000000000000000000000600082015250565b6000610b35601383610aee565b9150610b4082610aff565b602082019050919050565b60006020820190508181036000830152610b6481610b28565b9050919050565b600081905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000610bac601c83610b6b565b9150610bb782610b76565b601c82019050919050565b6000819050919050565b610bdd610bd882610877565b610bc2565b82525050565b6000610bee82610b9f565b9150610bfa8284610bcc565b60208201915081905092915050565b610c12816108ad565b82525050565b6000608082019050610c2d6000830187610a17565b610c3a6020830186610c09565b610c476040830185610a17565b610c546060830184610a17565b95945050505050565b7f756e617574686f72697a6564206f72207573657220646f6573206e6f7420657860008201527f6973740000000000000000000000000000000000000000000000000000000000602082015250565b6000610cb9602383610aee565b9150610cc482610c5d565b604082019050919050565b60006020820190508181036000830152610ce881610cac565b9050919050565b7f4e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b6000610d25600e83610aee565b9150610d3082610cef565b602082019050919050565b60006020820190508181036000830152610d5481610d18565b9050919050565b7f5573657220616c72656164792065786973747300000000000000000000000000600082015250565b6000610d91601383610aee565b9150610d9c82610d5b565b602082019050919050565b60006020820190508181036000830152610dc081610d84565b9050919050565b6000602082019050610ddc6000830184610a30565b9291505056fea2646970667358221220a2ea27bc965f8a9c46dd24c92e7e683fa841775d9fb11b265bb2f0ef2e8372cd64736f6c63430008120033";

type DecentralizedIdentityManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DecentralizedIdentityManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DecentralizedIdentityManager__factory extends ContractFactory {
  constructor(...args: DecentralizedIdentityManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DecentralizedIdentityManager> {
    return super.deploy(
      overrides || {}
    ) as Promise<DecentralizedIdentityManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): DecentralizedIdentityManager {
    return super.attach(address) as DecentralizedIdentityManager;
  }
  override connect(signer: Signer): DecentralizedIdentityManager__factory {
    return super.connect(signer) as DecentralizedIdentityManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DecentralizedIdentityManagerInterface {
    return new utils.Interface(_abi) as DecentralizedIdentityManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DecentralizedIdentityManager {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as DecentralizedIdentityManager;
  }
}
